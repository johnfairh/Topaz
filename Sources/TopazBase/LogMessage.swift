//
//  LogMessage.Swift
//  TopazBase
//
//  Distributed under the MIT license, see LICENSE.
//

/// The category of message being logged, in descending order of importance.
/// Clients should normally be interested in recording `error` and `warning` and
/// may also be interested in `info`.
public enum LogLevel: String {
    /// Not sure what this means yet!  Probably precedes a crash??
    ///
    /// Rare, does not occur at all during normal operations.
    case error

    /// A message describing a condition that is unusual but does not immediately lead to
    /// a problem for the app, eg. being unable to read from a file. (maybe??)
    ///
    /// Rare, does not occur at all during normal operations.
    case warning

    /// A message describing normal progress that maybe of interest to clients.
    ///
    /// For example turns progressing.
    /// Occurs fairly often during normal operations.
    case info

    /// A message describing detailed normal progress of the library that is probably
    /// only interesting when attempting to debug the library internals.
    /// Occurs often during normal operations.
    case debug

    /// A debug message specific to saving of history (which occurs often)
    case debugHistory

    /// Helper, is this some kind of debug message?
    public var isDebug: Bool {
        return self == .debug || self == .debugHistory
    }
}

/// A log message generated by the library for the client to include in their logs.
/// These messages are intended to be human-readable although the audience is primarily
/// app developers; these are not intended for end users.
public struct LogMessage: CustomStringConvertible {

    /// The category of the log message.
    public let level: LogLevel

    /// A closure that vends the text of the log message.
    public let body: () -> String

    /// Create a new instance of a log messge.
    public init(_ level: LogLevel, _ body: @escaping () -> String) {
        self.level = level
        self.body  = body
    }

    /// A string combining `level` and `body`.
    public var description: String {
        return "\(level.rawValue): \(body())"
    }

    /// A log message handler callback passed to `???` to receive
    /// various informational messages that may be of interest to clients for their own logs.
    /// Calls can occur on any queue.
    public typealias Handler = (LogMessage) -> Void
}

/// Identifies a type that is able to send log messages.
public protocol Logger {
    var logMessageHandler: LogMessage.Handler { get }
    var logPrefix: String { get }
}

/// Provide a convenience routine to log a message.
public extension Logger {
    /// Log the message with given level and body, including the prefix
    func log(_ level: LogLevel, _ body: @autoclosure @escaping () -> String) {
        logMessageHandler(LogMessage(level, { "[\(self.logPrefix)] \(body())" }))
    }

    /// By default there is no prefix
    var logPrefix: String { return "" }
}

public extension Logger where Self: DebugDumpable {
    /// Use `DebugDumpable.debugName` for the prefix where possible
    var logPrefix: String { return debugName }
}
